{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","messagesRef","collection","query","orderBy","limit","dummyRef","useRef","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","type","props","messageClass","src","alt","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAUKA,IAASC,KAAKC,QACjBF,IAASG,cAAc,CACrBC,OAAQ,0CACNC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKrB,IAAMC,EAAOZ,IAASY,OAChBC,EAAYb,IAASa,YAmB3B,SAASC,IAKP,OACE,wBAAQC,UAAU,UAAUC,QALL,WACvB,IAAMC,EAAW,IAAIjB,IAASY,KAAKM,mBACnCN,EAAKO,gBAAgBF,IAGrB,iCAGJ,SAASG,IACP,OAAQR,EAAKS,aACX,wBAAQN,UAAU,WAAWC,QAAS,kBAAMJ,EAAKU,WAAjD,sBAIJ,SAASC,IACP,IAAMC,EAAcX,EAAUY,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAE/CC,EAAWC,mBAJC,EAMCC,YAAkBL,EAAO,CAAEM,QAAS,OAAhDC,EANW,sBAQgBC,mBAAS,IARzB,mBAQXC,EARW,KAQAC,EARA,KAUZC,EAAW,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGO5B,EAAKS,YAAvBoB,EAHW,EAGXA,IAAKC,EAHM,EAGNA,SAHM,SAKZlB,EAAYmB,IAAI,CACpBC,KAAMT,EACNU,UAAW7C,IAASa,UAAUiC,WAAWC,kBACzCN,MACAC,aATgB,OAYlBN,EAAa,IAEbP,EAASmB,QAAQC,eAAe,CAAEC,SAAU,WAd1B,2CAAH,sDAiBjB,OACE,qCACE,8BACGjB,GAAYA,EAASkB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,SAGzD,qBAAKC,IAAK3B,IAEV,uBAAM4B,SAAUpB,EAAhB,UACE,uBAAOqB,MAAOvB,EAAWwB,SAAU,SAACrB,GAAD,OAAOF,EAAaE,EAAEsB,OAAOF,UAEhE,wBAAQG,KAAK,SAAb,0BAMR,SAASR,EAAYS,GAAQ,IAAD,EACMA,EAAMR,QAA9BV,EADkB,EAClBA,KAAMH,EADY,EACZA,IAAKC,EADO,EACPA,SAEbqB,EAAetB,IAAQ7B,EAAKS,YAAYoB,IAAM,OAAS,WAE7D,OACI,sBAAK1B,UAAS,kBAAagD,GAA3B,UACE,qBAAKC,IAAKtB,EAAUuB,IAAI,WACxB,4BAAIrB,OAKGsB,MAzFf,WAAgB,IAAD,EACEC,YAAavD,GAArBwD,EADM,oBAGb,OACE,sBAAKrD,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACA,sEACE,cAACK,EAAD,OAGF,kCACGgD,EAAO,cAAC7C,EAAD,IAAe,cAACT,EAAD,UC1BhBuD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7e457adc.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nif (!firebase.apps.length) {\n  firebase.initializeApp({\n    apiKey: \"AIzaSyDYPDqpyNzDnZz9OQWJ7GyWwukcvyMMCjI\",\n      authDomain: \"groupchat-ac451.firebaseapp.com\",\n      databaseURL: \"https://groupchat-ac451.firebaseio.com\",\n      projectId: \"groupchat-ac451\",\n      storageBucket: \"groupchat-ac451.appspot.com\",\n      messagingSenderId: \"438122286931\",\n      appId: \"1:438122286931:web:2c5e0d15629abcf94a9ba6\",\n      measurementId: \"G-1DW7ZT9DPG\"\n  });\n  \n}\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <h1>‚öõÔ∏èüî•üí¨</h1>\n        <SignOut />\n      </header>\n\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n  return (\n    <button className=\"sign-in\" onClick={signInWithGoogle}>Sign in with Google</button>\n  )\n}\nfunction SignOut() {\n  return  auth.currentUser && (\n    <button className=\"sign-out\" onClick={() => auth.signOut()}>Sign out</button>\n  )\n}\n\nfunction ChatRoom() {\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const dummyRef = useRef();\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async(e) => {\n    e.preventDefault();\n\n    const {uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    });\n\n    setFormValue('');\n\n    dummyRef.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  return (\n    <>\n      <div>\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n      </div>\n\n      <div ref={dummyRef}></div>\n\n      <form onSubmit={sendMessage}>\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)} />\n\n        <button type='submit'>Submit</button>\n      </form>\n    </>\n  )\n}\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (\n      <div className={`message ${messageClass}`}>\n        <img src={photoURL} alt='avatar' />\n        <p>{text}</p>\n      </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}